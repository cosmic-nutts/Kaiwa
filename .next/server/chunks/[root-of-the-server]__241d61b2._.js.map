{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Natasha/OneDrive/Desktop/kaiwa/app/api/vapi/generate/route.ts"],"sourcesContent":["// import { generateText } from \"ai\";\r\n// import { google } from \"@ai-sdk/google\";\r\n\r\n// import { db } from \"@/firebase/admin\";\r\n// import { getRandomInterviewCover } from \"@/lib/utils\";\r\n\r\n// export async function POST(request: Request) {\r\n//   const { type, role, level, techstack, amount, userid } = await request.json();\r\n\r\n//   try {\r\n//     const { text: questions } = await generateText({\r\n//       model: google(\"gemini-2.0-flash-001\"),\r\n//       prompt: `Prepare questions for a job interview.\r\n//         The job role is ${role}.\r\n//         The job experience level is ${level}.\r\n//         The tech stack used in the job is: ${techstack}.\r\n//         The focus between behavioural and technical questions should lean towards: ${type}.\r\n//         The amount of questions required is: ${amount}.\r\n//         Please return only the questions, without any additional text.\r\n//         The questions are going to be read by a voice assistant so do not use \"/\" or \"*\" or any other special characters which might break the voice assistant.\r\n//         Return the questions formatted like this:\r\n//         [\"Question 1\", \"Question 2\", \"Question 3\"]\r\n        \r\n//         Thank you! <3\r\n//     `,\r\n//     });\r\n\r\n//     const interview = {\r\n//       role: role,\r\n//       type: type,\r\n//       level: level,\r\n//       techstack: techstack.split(\",\"),\r\n//       questions: JSON.parse(questions),\r\n//       userId: userid,\r\n//       finalized: true,\r\n//       coverImage: getRandomInterviewCover(),\r\n//       createdAt: new Date().toISOString(),\r\n//     };\r\n\r\n//     await db.collection(\"interviews\").add(interview);\r\n\r\n//     return Response.json({ success: true }, { status: 200 });\r\n//   } catch (error) {\r\n//     console.error(\"Error:\", error);\r\n//     return Response.json({ success: false, error: error }, { status: 500 });\r\n//   }\r\n// }\r\n\r\nexport async function GET() {\r\n  return Response.json({ success: true, data: \"Thank you!\" }, { status: 200 });\r\n}"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,2CAA2C;AAE3C,yCAAyC;AACzC,yDAAyD;AAEzD,iDAAiD;AACjD,mFAAmF;AAEnF,UAAU;AACV,uDAAuD;AACvD,+CAA+C;AAC/C,wDAAwD;AACxD,mCAAmC;AACnC,gDAAgD;AAChD,2DAA2D;AAC3D,8FAA8F;AAC9F,0DAA0D;AAC1D,yEAAyE;AACzE,kKAAkK;AAClK,oDAAoD;AACpD,qDAAqD;AAErD,wBAAwB;AACxB,SAAS;AACT,UAAU;AAEV,0BAA0B;AAC1B,oBAAoB;AACpB,oBAAoB;AACpB,sBAAsB;AACtB,yCAAyC;AACzC,0CAA0C;AAC1C,wBAAwB;AACxB,yBAAyB;AACzB,+CAA+C;AAC/C,6CAA6C;AAC7C,SAAS;AAET,wDAAwD;AAExD,gEAAgE;AAChE,sBAAsB;AACtB,sCAAsC;AACtC,+EAA+E;AAC/E,MAAM;AACN,IAAI;;;;AAEG,eAAe;IACpB,OAAO,SAAS,IAAI,CAAC;QAAE,SAAS;QAAM,MAAM;IAAa,GAAG;QAAE,QAAQ;IAAI;AAC5E","debugId":null}}]
}